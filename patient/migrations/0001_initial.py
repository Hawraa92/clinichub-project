# Generated by Django 5.2.4 on 2025-10-22 14:34

import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
import patient.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('doctor', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(db_index=True, max_length=100, verbose_name='Full Name')),
                ('date_of_birth', models.DateField(blank=True, db_index=True, null=True, validators=[patient.models.validate_dob], verbose_name='Date of Birth')),
                ('mobile', models.CharField(blank=True, db_index=True, help_text='E.164 format: optional +, 7–15 digits.', max_length=20, null=True, validators=[patient.models.validate_mobile], verbose_name='Mobile Number')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Address')),
                ('email', models.EmailField(blank=True, max_length=100, null=True, verbose_name='Email Address')),
                ('diabetes_status', models.IntegerField(blank=True, choices=[(0, 'Healthy'), (1, 'Prediabetic'), (2, 'Diabetic')], help_text='0=Healthy, 1=Prediabetic, 2=Diabetic', null=True, verbose_name='Diabetes Status')),
                ('high_bp', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0, verbose_name='High Blood Pressure?')),
                ('high_chol', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0, verbose_name='High Cholesterol?')),
                ('chol_check', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0, verbose_name='Cholesterol Checked?')),
                ('bmi', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(80)], verbose_name='BMI')),
                ('hbA1c', models.DecimalField(blank=True, decimal_places=1, help_text='Average blood glucose (3-month).', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(15)], verbose_name='HbA1c (%)')),
                ('smoker', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0, verbose_name='Smoker?')),
                ('stroke', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0, verbose_name='Stroke?')),
                ('heart_disease_or_attack', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0, verbose_name='Heart Disease or Attack?')),
                ('phys_activity', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0, verbose_name='Physical Activity?')),
                ('fruits', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0, verbose_name='Eats Fruits Regularly?')),
                ('veggies', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0, verbose_name='Eats Vegetables Regularly?')),
                ('hvy_alcohol_consump', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0, verbose_name='Heavy Alcohol Consumption?')),
                ('any_healthcare', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0, verbose_name='Any Healthcare Coverage?')),
                ('no_doc_bc_cost', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0, verbose_name='Could Not See Doctor Due to Cost?')),
                ('gen_hlth', models.IntegerField(blank=True, choices=[(1, 'Excellent'), (2, 'Very good'), (3, 'Good'), (4, 'Fair'), (5, 'Poor')], null=True, verbose_name='General Health')),
                ('ment_hlth', models.IntegerField(blank=True, help_text='Days mental health was not good (last 30 days).', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)], verbose_name='Mental Health Days')),
                ('phys_hlth', models.IntegerField(blank=True, help_text='Days physical health was not good (last 30 days).', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)], verbose_name='Physical Health Days')),
                ('diff_walk', models.IntegerField(choices=[(0, 'No'), (1, 'Yes')], default=0, verbose_name='Difficulty Walking?')),
                ('sex', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], help_text='M = Male, F = Female', max_length=1, null=True, verbose_name='Sex')),
                ('age_group', models.IntegerField(blank=True, choices=[(1, '18–24'), (2, '25–29'), (3, '30–34'), (4, '35–39'), (5, '40–44'), (6, '45–49'), (7, '50–54'), (8, '55–59'), (9, '60–64'), (10, '65–69'), (11, '70–74'), (12, '75–79'), (13, '80+')], editable=False, null=True, verbose_name='Age Group')),
                ('education', models.IntegerField(blank=True, choices=[(1, 'Never attended / Kindergarten only'), (2, 'Primary school'), (3, 'Middle school'), (4, 'High school'), (5, 'Vocational / Associate degree'), (6, 'College 4yrs+')], null=True, verbose_name='Education Level')),
                ('income', models.IntegerField(blank=True, choices=[(1, '< $10 000'), (2, '$10 000–14 999'), (3, '$15 000–19 999'), (4, '$20 000–24 999'), (5, '$25 000–34 999'), (6, '$35 000–49 999'), (7, '$50 000–74 999'), (8, '≥ $75 000')], null=True, verbose_name='Income Level')),
                ('past_medical_history', models.TextField(blank=True, null=True, verbose_name='Past Medical History')),
                ('drug_history', models.TextField(blank=True, null=True, verbose_name='Drug History')),
                ('investigations', models.TextField(blank=True, null=True, verbose_name='Investigations')),
                ('diabetes_prediction', models.IntegerField(blank=True, choices=[(0, 'Healthy'), (1, 'Prediabetic'), (2, 'Diabetic')], help_text='Auto-generated by AI model.', null=True, verbose_name='Predicted Diabetes Status')),
                ('prediction_proba', models.JSONField(blank=True, help_text='e.g. {"0":0.72,"1":0.18,"2":0.10}', null=True, verbose_name='Prediction Probabilities')),
                ('clinical_notes', models.TextField(blank=True, null=True, verbose_name='Clinical Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patients', to='doctor.doctor', verbose_name='Assigned Doctor')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_profile', to=settings.AUTH_USER_MODEL, verbose_name='User Account')),
            ],
            options={
                'verbose_name': 'Patient',
                'verbose_name_plural': 'Patients',
                'ordering': ['-created_at', 'full_name'],
                'indexes': [models.Index(fields=['doctor', 'full_name'], name='patient_pat_doctor__f953a1_idx'), models.Index(fields=['date_of_birth'], name='patient_pat_date_of_b65d26_idx'), models.Index(fields=['doctor', 'created_at'], name='patient_pat_doctor__919c2f_idx'), models.Index(django.db.models.functions.text.Lower('full_name'), name='idx_patient_full_name_lower'), models.Index(django.db.models.functions.text.Lower('email'), name='idx_patient_email_lower')],
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('bmi__gte', 10), ('bmi__lte', 80)), ('bmi__isnull', True), _connector='OR'), name='patient_bmi_range'), models.CheckConstraint(condition=models.Q(models.Q(('hbA1c__gte', 3), ('hbA1c__lte', 15)), ('hbA1c__isnull', True), _connector='OR'), name='patient_hba1c_range'), models.CheckConstraint(condition=models.Q(models.Q(('ment_hlth__gte', 0), ('ment_hlth__lte', 30)), ('ment_hlth__isnull', True), _connector='OR'), name='patient_ment_hlth_range'), models.CheckConstraint(condition=models.Q(models.Q(('phys_hlth__gte', 0), ('phys_hlth__lte', 30)), ('phys_hlth__isnull', True), _connector='OR'), name='patient_phys_hlth_range'), models.CheckConstraint(condition=models.Q(models.Q(('age_group__gte', 1), ('age_group__lte', 13)), ('age_group__isnull', True), _connector='OR'), name='patient_age_group_valid'), models.UniqueConstraint(condition=models.Q(('mobile__gt', '')), fields=('mobile',), name='uniq_patient_mobile_nonempty'), models.UniqueConstraint(django.db.models.functions.text.Lower('email'), condition=models.Q(('email__isnull', False), models.Q(('email', ''), _negated=True)), name='uniq_patient_email_lower')],
            },
        ),
    ]
